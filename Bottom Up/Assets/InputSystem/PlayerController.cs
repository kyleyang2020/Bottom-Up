//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Ground Movement"",
            ""id"": ""2c4cb0c6-a93a-48e4-805d-882888ab1f1c"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""901f983f-df75-4f3a-a161-1a5f42a66dfb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SprintStart"",
                    ""type"": ""Button"",
                    ""id"": ""7d23529c-482e-423f-90b5-0125193ca788"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintFinish"",
                    ""type"": ""Button"",
                    ""id"": ""636298cc-1f25-4baa-b540-2972f51caec1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchStart"",
                    ""type"": ""Button"",
                    ""id"": ""ec2e38b5-cc68-4321-8582-58c90e92d8fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchFinish"",
                    ""type"": ""Button"",
                    ""id"": ""b703f22b-5539-4640-8777-86d190566392"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8ec17ede-a165-4c4f-83a1-71d16c042b67"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8d56852e-6f7d-4b7e-b530-e158d41f045e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""44b38ce1-cd84-4c65-816e-6431bfefcac7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b5bc1b8e-7863-4b7d-b4a7-ea018c5f740b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""63d68d0e-f457-4736-9ab2-0daa883ef7cf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cdef8783-d3b9-4ea7-b9d4-3f72d708ef79"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b56b4bb-76e4-4fca-9b83-bf6f65a61179"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintFinish"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43ee8ca8-6481-4a08-94e7-4c8a8039779c"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edccee20-df67-4185-9fc1-6353cbb04d1b"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchFinish"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ground Movement
        m_GroundMovement = asset.FindActionMap("Ground Movement", throwIfNotFound: true);
        m_GroundMovement_WASD = m_GroundMovement.FindAction("WASD", throwIfNotFound: true);
        m_GroundMovement_SprintStart = m_GroundMovement.FindAction("SprintStart", throwIfNotFound: true);
        m_GroundMovement_SprintFinish = m_GroundMovement.FindAction("SprintFinish", throwIfNotFound: true);
        m_GroundMovement_CrouchStart = m_GroundMovement.FindAction("CrouchStart", throwIfNotFound: true);
        m_GroundMovement_CrouchFinish = m_GroundMovement.FindAction("CrouchFinish", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ground Movement
    private readonly InputActionMap m_GroundMovement;
    private List<IGroundMovementActions> m_GroundMovementActionsCallbackInterfaces = new List<IGroundMovementActions>();
    private readonly InputAction m_GroundMovement_WASD;
    private readonly InputAction m_GroundMovement_SprintStart;
    private readonly InputAction m_GroundMovement_SprintFinish;
    private readonly InputAction m_GroundMovement_CrouchStart;
    private readonly InputAction m_GroundMovement_CrouchFinish;
    public struct GroundMovementActions
    {
        private @PlayerController m_Wrapper;
        public GroundMovementActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_GroundMovement_WASD;
        public InputAction @SprintStart => m_Wrapper.m_GroundMovement_SprintStart;
        public InputAction @SprintFinish => m_Wrapper.m_GroundMovement_SprintFinish;
        public InputAction @CrouchStart => m_Wrapper.m_GroundMovement_CrouchStart;
        public InputAction @CrouchFinish => m_Wrapper.m_GroundMovement_CrouchFinish;
        public InputActionMap Get() { return m_Wrapper.m_GroundMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundMovementActions set) { return set.Get(); }
        public void AddCallbacks(IGroundMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_GroundMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GroundMovementActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @SprintStart.started += instance.OnSprintStart;
            @SprintStart.performed += instance.OnSprintStart;
            @SprintStart.canceled += instance.OnSprintStart;
            @SprintFinish.started += instance.OnSprintFinish;
            @SprintFinish.performed += instance.OnSprintFinish;
            @SprintFinish.canceled += instance.OnSprintFinish;
            @CrouchStart.started += instance.OnCrouchStart;
            @CrouchStart.performed += instance.OnCrouchStart;
            @CrouchStart.canceled += instance.OnCrouchStart;
            @CrouchFinish.started += instance.OnCrouchFinish;
            @CrouchFinish.performed += instance.OnCrouchFinish;
            @CrouchFinish.canceled += instance.OnCrouchFinish;
        }

        private void UnregisterCallbacks(IGroundMovementActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @SprintStart.started -= instance.OnSprintStart;
            @SprintStart.performed -= instance.OnSprintStart;
            @SprintStart.canceled -= instance.OnSprintStart;
            @SprintFinish.started -= instance.OnSprintFinish;
            @SprintFinish.performed -= instance.OnSprintFinish;
            @SprintFinish.canceled -= instance.OnSprintFinish;
            @CrouchStart.started -= instance.OnCrouchStart;
            @CrouchStart.performed -= instance.OnCrouchStart;
            @CrouchStart.canceled -= instance.OnCrouchStart;
            @CrouchFinish.started -= instance.OnCrouchFinish;
            @CrouchFinish.performed -= instance.OnCrouchFinish;
            @CrouchFinish.canceled -= instance.OnCrouchFinish;
        }

        public void RemoveCallbacks(IGroundMovementActions instance)
        {
            if (m_Wrapper.m_GroundMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGroundMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_GroundMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GroundMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GroundMovementActions @GroundMovement => new GroundMovementActions(this);
    public interface IGroundMovementActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnSprintStart(InputAction.CallbackContext context);
        void OnSprintFinish(InputAction.CallbackContext context);
        void OnCrouchStart(InputAction.CallbackContext context);
        void OnCrouchFinish(InputAction.CallbackContext context);
    }
}
